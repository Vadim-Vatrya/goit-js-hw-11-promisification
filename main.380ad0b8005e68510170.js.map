{"version":3,"sources":["webpack:///./js/task_1.js","webpack:///./js/task_2.js","webpack:///./js/task_3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","canProcess","id","logSuccess","logError","warn","catch"],"mappings":"6JAMMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACTF,EAAQ,GAAGF,UAKXK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GACjBN,EAAM,MAAOU,KAAKJ,G,kCCdZK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAOd,QAAQC,QACbY,EAASE,KAAI,SAAAC,GAAI,OACfA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,OAK7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GClBnC,IAAMe,EAAkB,SAAAC,GACtB,IAaiCC,EAAKC,EAbhCxB,GAa2BuB,EAbO,IAaFC,EAbO,IActCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAbpD,OAAO,IAAIrB,SAAQ,SAACC,EAASC,GAC3B,IAAMwB,EAAaH,KAAKE,SAAW,GACnCtB,YAAW,WACT,IAAMwB,EAAKP,EAAYO,GACnBD,GACFzB,EAAQ,CAAE0B,KAAI7B,UAEhBI,EAAOyB,KACN7B,OAQP,IAAM8B,EAAa,SAAC,GAAkB,IAAhBD,EAAgB,EAAhBA,GAAI7B,EAAY,EAAZA,MACxBQ,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8C7B,EAA9C,OAGI+B,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,KAAMnB,KAAKoB,GAAYG,MAAMF,GAEnDV,EAAgB,CAAEQ,GAAI,KAAMnB,KAAKoB,GAAYG,MAAMF,GAEnDV,EAAgB,CAAEQ,GAAI,KAAMnB,KAAKoB,GAAYG,MAAMF,GAEnDV,EAAgB,CAAEQ,GAAI,KAAMnB,KAAKoB,GAAYG,MAAMF,K","file":"main.380ad0b8005e68510170.js","sourcesContent":["// Задание 1\r\n\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\"\r\n// через ms миллисекунд.Значением исполнившегося промиса должно быть то кол - во миллисекунд\r\n// которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(`${ms}`);\r\n    });\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\ndelay(15000).then(logger);\r\n","// Задание 2\r\n\r\n//   Перепиши функцию toggleUserState() так, чтобы она не использовала\r\n// callback - функцию callback, а принимала всего два параметра\r\n// allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return Promise.resolve(\r\n    allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    ),\r\n  );\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","// Задание 3\r\n\r\n//   Перепиши функцию makeTransaction() так, чтобы она не использовала\r\n// callback - функции onSuccess и onError, а принимала всего один пара -\r\n// метр transaction и возвращала промис.\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((resolve, reject) => {\r\n    const canProcess = Math.random() > 0.3;\r\n    setTimeout(() => {\r\n      const id = transaction.id;\r\n      if (canProcess) {\r\n        resolve({ id, delay });\r\n      }\r\n      reject(id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nfunction randomIntegerFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nconst logSuccess = ({ id, delay }) => {\r\n  console.log(`Transaction ${id} processed in ${delay}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}